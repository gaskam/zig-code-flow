name: Publish Extension

on:
  workflow_dispatch:
    inputs:
      version:
        description: Version to publish
        required: true
        type: choice
        options:
        - major
        - minor
        - patch

  pull_request:
    types: [closed]
    branches:
      - master
  release:
    types: [published]

permissions:
  contents: write
  pull-requests: write

jobs:
  initialize:
    if: github.event.pull_request.merged == true || github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    outputs:
      INIT_DONE: ${{ steps.mark_init.outputs.INIT_DONE }}

    steps:
      - name: Install jq
        run: sudo apt-get install -y jq
      
      - name: Checkout repository
        uses: actions/checkout@v4.2.2
      
      - name: Set up Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Set up Node.js
        uses: actions/setup-node@v4.2.0
        with:
          node-version: 20

      - name: Validate package.json
        run: jq . package.json > /dev/null

      - name: Install dependencies
        run: npm install

      - name: Mark initialization as done
        id: mark_init
        run: echo "INIT_DONE=true" >> $GITHUB_OUTPUT

  version-management:
    needs: [initialize]
    if: (github.event.pull_request.merged == true && !contains(github.event.pull_request.labels.*.name, 'no-release')) || github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    outputs:
      VERSION_DONE: ${{ steps.mark_version.outputs.VERSION_DONE }}
      VERSION: ${{ steps.set_version.outputs.VERSION }}

    steps:
      - uses: actions/checkout@v4.2.2

      - name: Set up Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Set version based on event
        id: set_version
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            VERSION=$(echo "${{ github.event.release.tag_name }}" | sed 's/^v//')
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            CURRENT_VERSION=$(jq -r .version package.json)
            INCREMENT="${{ github.event.inputs.version }}"
            npm version $INCREMENT --no-git-tag-version
            VERSION=$(jq -r .version package.json)
            if ! gh release view "v$VERSION" &>/dev/null; then
              gh release create "v$VERSION" \
                --title "Release $VERSION" \
                --generate-notes \
                --latest || true
            else
              echo "Release v$VERSION already exists"
            fi
          else
            CURRENT_VERSION=$(jq -r .version package.json)
            INCREMENT="patch"
            PR_CONTENT="${{ github.event.pull_request.title }} ${{ github.event.pull_request.body }}"
            if echo "$PR_CONTENT" | grep -qi '\[major\]'; then
              INCREMENT="major"
            elif echo "$PR_CONTENT" | grep -qi '\[minor\]'; then
              INCREMENT="minor"
            fi
            npm version $INCREMENT --no-git-tag-version
            VERSION=$(jq -r .version package.json)
            if ! gh release view "v$VERSION" &>/dev/null; then
              gh release create "v$VERSION" \
                --title "Release $VERSION" \
                --generate-notes \
                --latest || true
            else
              echo "Release v$VERSION already exists"
            fi
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}

      - name: Mark version work as done
        id: mark_version
        run: echo "VERSION_DONE=true" >> $GITHUB_OUTPUT

  push:
    needs: [version-management]
    if: needs.version-management.outputs.VERSION_DONE == 'true'
    runs-on: ubuntu-latest
    outputs:
      MASTER_PUSH_DONE: ${{ steps.mark_push.outputs.MASTER_PUSH_DONE }}

    steps:
      - uses: actions/checkout@v4.2.2
        with:
          ref: master
          fetch-depth: 0
          token: ${{ secrets.WORKFLOW_TOKEN}}

      - name: Set up Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
      
      - name: Validate version format
        run: |
          VERSION="${{ needs.version-management.outputs.VERSION }}"
          if ! echo "$VERSION" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$'; then
            echo "::error::Invalid version format: $VERSION"
            exit 1
          fi

      - name: Update version
        run: |
          VERSION="${{ needs.version-management.outputs.VERSION }}"
          if ! jq ".version = \"$VERSION\"" package.json > tmp.json; then
            echo "::error::Failed to update package.json"
            exit 1
          fi
          mv tmp.json package.json
          npm install

      - name: Commit version changes
        run: |
          git add package.json package-lock.json
          git commit -a -m "Bump version to v${{ needs.version-management.outputs.VERSION }}"

      - name: Push version changes
        run: |
          git push origin HEAD:master
        env:
          GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}

      - name: Mark master push as done
        id: mark_push
        run: echo "MASTER_PUSH_DONE=true" >> $GITHUB_OUTPUT

  publish:
    needs: [push]
    if: needs.push.outputs.MASTER_PUSH_DONE == 'true'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0
          ref: master
          token: ${{ secrets.WORKFLOW_TOKEN }}
      
      - name: Get latest changes
        run: |
          git fetch origin master
          git checkout master
          git pull origin master

      - uses: actions/setup-node@v4.2.0
        with:
          node-version: 20
      
      - name: Install dependencies
        run: npm install

      - name: Verify marketplace token
        run: |
          if [ -z "${{ secrets.VS_MARKETPLACE_TOKEN }}" ]; then
            echo "::error::Marketplace token missing. Add VS_MARKETPLACE_TOKEN in repository secrets."
            exit 1
          fi

      - name: Publish to Visual Studio Marketplace
        uses: HaaLeo/publish-vscode-extension@v1.6.2
        with:
          pat: ${{ secrets.VS_MARKETPLACE_TOKEN }}
          registryUrl: https://marketplace.visualstudio.com
